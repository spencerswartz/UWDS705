sum(encrypta_mulitfreq[1:4])
sortEnglish_combined = c( sum(encrypta_mulitfreq[1:4]), encrypta_mulitfreq[3:26] )
sortEnglish_combined
sortEnglish_combined = c( sum(encrypta_mulitfreq[1:4]), encrypta_mulitfreq[5:26] )
sortEnglish_combined
sortencrypta_combined = c( sum(ordered_encrypta[1:4]), ordered_encrypta[5:26] )
sortencrypta_combined
chisq.test(sortencrypta_combined, p=sortEnglish_combined)
sortEnglish_combined_prob = c( sum(ordered_freq[1:4]), ordered_freq[5:26] )
chisq.test(sortencrypta_combined, p=sortEnglish_combined_prob)
freq_order_W <-  order(Welsh)
ordered_freq_w <- English[freq_order_w]
ordered_freq_w <- English[freq_order_W]
welsh_multifreq <- ordered_freq_W*sum(ordered_encrypta)
ordered_freq_W<- English[freq_order_W]
welsh_multifreq <- ordered_freq_W*sum(ordered_encrypta)
welsh_multifreq
ordered_freq_W
freq_order_W
order(Welsh)
ordered_freq_W<- Welsh[freq_order_W]
welsh_multifreq <- ordered_freq_W*sum(ordered_encrypta)
welsh_multifreq
sortWelsh_combined = c( sum(encrypta_mulitfreq[1:7]), encrypta_mulitfreq[8:26] )
sortWelsh_combined_prob = c( sum(ordered_freq_W[1:7]), ordered_freq_W[8:26] )
sortencrypta_combined_W = c( sum(ordered_encrypta[1:7]), ordered_encrypta[8:26] )
chisq.test(sortencrypta_combined_W, p=sortWelsh_combined_prob)
encryptedB <- read.csv("~/GitHub/ds710fall2016assignment6/encryptedB.csv",header = TRUE)
View(encryptedB)
keyB <- encryptedB$key
valueB <- encryptedB$value
encryptB_order <-  order(valueB)
ordered_encryptB <- valueB[encryptB_order]
English_multifreqB <- ordered_freq*sum(ordered_encryptB)
English_multifreqB
sortEnglish_combinedB = c( sum(English_mulitfreqB[1:3]), English_mulitfreqB[4:26] )
English_multifreqB <- ordered_freq*sum(ordered_encryptB)
English_multifreqB
sortEnglish_combinedB = c( sum(English_mulitfreqB[1:3]), English_mulitfreqB[4:26] )
sortEnglish_combinedB = c( sum(English_multifreqB[1:3]), English_multifreqB[4:26] )
sortEnglish_combinedB
sortEnglish_combinedB = c( sum(English_multifreqB[1:4]), English_multifreqB[5:26] )
sortEnglish_combinedB_prob = c( sum(ordered_freq[1:4]), ordered_freq[5:26] )
sortEnglish_combinedB = c( sum(ordered_encryptB[1:4]), ordered_encryptB[5:26] )
sortencryptB_combined = c( sum(ordered_encryptB[1:4]), ordered_encryptB[5:26] )
sortEnglish_combinedB = c( sum(English_multifreqB[1:4]), English_multifreqB[5:26] )
chisq.test(sortencrypta_combined, p=sortEnglish_combinedB_prob)
chisq.test(sortencryptB_combined, p=sortEnglish_combinedB_prob)
welsh_multifreqB <- ordered_freq_W*sum(ordered_encryptB)
welsh_multifreqB
welsh_multifreqB <- ordered_freq_W*sum(ordered_encryptB)
sortWelsh_combinedB = c( sum(Welsh_multifreqB[1:7]), Welsh_multifreqB[8:26] )
sortWelsh_combinedB = c( sum(welsh_multifreqB[1:7]), welsh_multifreqB[8:26] )
sortWelsh_combinedB_prob = c( sum(ordered_freq_W[1:7]), ordered_freq_W[8:26] )
sortencryptB_combined_Welsh = c( sum(ordered_encryptB[1:7]), ordered_encryptB[8:26] )
chisq.test(sortencryptB_combined_Welsh, p=sortWelsh_combinedB_prob)
x = matrix( c(1,3,2, 6,NA,4), nr = 3 )
x
apply(x, 2, max)
x
max( c(4, NA, 6), na.rm=T )
x = matrix( c(1,3,2, 6,NA,4), nr = 3 )
apply(x, 2, max, na.rm=T)
apply(x, 2, min, na.rm=T)
apply(x, 3, min, na.rm=T)
apply(x, 2, min, na.rm=T)
apply(x, 1, min, na.rm=T)
apply(x, 2, sort)
help("tapply")
AmesHousing <- read.csv("C:/Users/Spencer Swartz/Downloads/AmesHousing.csv")
View(AmesHousing)
append(AmesHousing)
attach(AmesHousing)
tapply(SalePrice,Land.Slope,median)
ames2  <- AmesHousing[,45:54]
PearsonSkew<-function(x){
3*(mean(x) - median(x))/sd(x)
}
PearsonSkew(c(1,1,2,10))
PearsonSkew<-function(x, ...){
3*(mean(x, ...) - median(x, ...))/sd(x, ...)
}
apply(ames2, 2, PearsonSkew)
apply(ames2, 2, PearsonSkew, na.rm =T)
HouseScore<-function(x){
score = as.numeric(x[48])/1000
if(as.numeric(x[82]) < 200000){ score = score + 5 }
else if(as.numeric(x[82]) < 300000){ score = score + 3 }
if(x[14] == "NoRidge"){ score = score + 3 }
if(x[14] == "NridgHt"){ score = score + 2 }
return(score)
} # end of function HouseScore
apply(AmesHousing,1,HouseScore)
max(apply(AmesHousing,1,HouseScore))
which.max(apply(AmesHousing,1,HouseScore))
source('~/GitHub/ds710fall2016assignment8/HW8.r')
#read csv
#The original data was transposed so that the colums are now rows and visa-versa
Best.Cities <- read.csv("~/GitHub/ds710fall2016assignment8/Best Cities Transpose.csv")
#create fucntion to score citys
CityScore<-function(x){
score = Best.Cities[2]/10
if(Best.Cities[5] < 20){ score = score + 4 }
else if(Best.Cities[5] < 25){ score = score + 3 }
if((Best.Cities[4] < 100 )&(Best.Cities[11]>20)){ score = score + 7 }
else if(Best.Cities[11]>20){ score = score + 3 }
if(Best.Cities[7]/Best.Cities[8] > 26){ score = score + 8 }
return(score)
} # end of function CityScore
#apply the fuction to the Best citys dataset
Scores = apply(Best.Cities.reshaped, 1, CityScore)
Scores = apply(Best.Cities, 1, CityScore)
Scores
Best.Cities <- read.csv("~/GitHub/ds710fall2016assignment8/Best Cities Transpose.csv", header = True)
Best.Cities <- read.csv("~/GitHub/ds710fall2016assignment8/Best Cities Transpose.csv", header = TRUE)
Scores = apply(Best.Cities, 1, CityScore)
warnings()
CityScore<-function(x){
score = x[2]/10
if(x[5] < 20){ score = score + 4 }
else if(x[5] < 25){ score = score + 3 }
if((x[4] < 100 )&(x[11]>20)){ score = score + 7 }
else if(x[11]>20){ score = score + 3 }
if(x[7]/x[8] > 26){ score = score + 8 }
return(score)
} # end of function CityScore
Scores = apply(Best.Cities, 1, CityScore)
CityScore<-function(x){
score = as.numeric(x[2])/10
if(x[5] < 20){ score = score + 4 }
else if(x[5] < 25){ score = score + 3 }
if((x[4] < 100 )&(x[11]>20)){ score = score + 7 }
else if(x[11]>20){ score = score + 3 }
if(x[7]/x[8] > 26){ score = score + 8 }
return(score)
}
Scores = apply(Best.Cities, 1, CityScore)
if(as.numeric(x[7])/as.numeric(x[8]) > 26){ score = score + 8 }
CityScore<-function(x){
score = as.numeric(x[2])/10
if(x[5] < 20){ score = score + 4 }
else if(x[5] < 25){ score = score + 3 }
if((x[4] < 100 )&(x[11]>20)){ score = score + 7 }
else if(x[11]>20){ score = score + 3 }
if(as.numeric(x[7])/as.numeric(x[8]) > 26){ score = score + 8 }
return(score)
}
Scores = apply(Best.Cities, 1, CityScore)
CityScore<-function(x){
score = as.numeric(x[2])/10
if(x[5] < 20){ score = score + 5 }
else if(x[5] < 25){ score = score + 3 }
if((x[4] < 100 )&(x[11]>20)){ score = score + 5 }
else if(x[11]>20){ score = score + 3 }
if(as.numeric(x[7])/as.numeric(x[8]) > 26){ score = score + 5 }
return(score)
}
Scores = apply(Best.Cities, 1, CityScore)
Scores
Best.Cities[0]
Best.Cities[1]
Best.Cities[1][2]
Best.Cities[1:2]
Best.Cities[1,2]
Best.Cities[0,2]
Best.Cities[1,1]
Scores = apply(Best.Cities, 1, CityScore)
Scores
Best.Cities[which.max(Scores),1]
View(Best.Cities)
View(Best.Cities)
#Spencer Swartz
####1.a####
data=scan("C:\Users\Spencer Swartz\Documents\GitHub\ds710fall2016assignment11/Amazon_reviews.csv",skip = 1, nlines = 570000,sep = ',',what=list('numeric','character','numeric','numeric','numeric','numeric','numeric','numeric'))
####1.b####
datamatrix=t(matrix(data,nr=8))
dataheader=scan("C:\Users\Spencer Swartz\Documents\GitHub\ds710fall2016assignment11/Amazon_reviews.csv",nlines = 1,what = character(), sep = ",")
colnames(datamatrix) = dataheader
####1.c####
totalvotes = datamatrix[4]
reviewlength = datamatrix[5]
exclamation = datamatrix[6]
helpfullfrac = datamatrix[7]
####1.d####
hist(as.numeric(unlist(helpfullfrac)))
max(as.numeric(unlist(helpfullfrac)))
min(as.numeric(unlist(helpfullfrac)))
data=scan("C:\Users\Spencer Swartz\Documents\GitHub\ds710fall2016assignment11/Amazon_reviews.csv",skip = 1, nlines = 570000,sep = ',',what=list('numeric','character','numeric','numeric','numeric','numeric','numeric','numeric'))
data=scan("~\Documents\GitHub\ds710fall2016assignment11/Amazon_reviews.csv",skip = 1, nlines = 570000,sep = ',',what=list('numeric','character','numeric','numeric','numeric','numeric','numeric','numeric'))
data=scan("~/Documents/GitHub/ds710fall2016assignment11/Amazon_reviews.csv",skip = 1, nlines = 570000,sep = ',',what=list('numeric','character','numeric','numeric','numeric','numeric','numeric','numeric'))
data=scan("~/GitHub/ds710fall2016assignment11/Amazon_reviews.csv",skip = 1, nlines = 570000,sep = ',',what=list('numeric','character','numeric','numeric','numeric','numeric','numeric','numeric'))
datamatrix=t(matrix(data,nr=8))
dataheader=scan("~/GitHub/ds710fall2016assignment11/Amazon_reviews.csv",nlines = 1,what = character(), sep = ",")
colnames(datamatrix) = dataheader
####1.c####
totalvotes = datamatrix[4]
reviewlength = datamatrix[5]
exclamation = datamatrix[6]
helpfullfrac = datamatrix[7]
####1.d####
hist(as.numeric(unlist(helpfullfrac)))
max(as.numeric(unlist(helpfullfrac)))
min(as.numeric(unlist(helpfullfrac)))
helpfull.reviews = numeric(length(as.numeric(unlist(helpfullfrac))))
#condition=as.numeric(unlist(helpfullfrac))[i]>.5
for(i in 1:length(as.numeric(unlist(helpfullfrac)))){
if(as.numeric(unlist(helpfullfrac)[i])>.5){
helpfull.reviews[i]='helpfull'
}
if(i %% 100 == 0){
print(i)
flush.console()
}
}
install.packages('swirl')
library(swirl)
swirl()
swirl()
install_course_github('DataScienceUWL','Statistical_Methods')
swirl()
swirl
swril
swirl
swirl()
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c()
c()?
d
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
swirl()
home
my_div <- z/my_sqrt
my_div
c(1,2)+c(3,4)
c(1,2,3,4)+c(3,4)
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
install.packages("rprojroot")
# Don't modify this chunk of code, it is just installing and loading the DS705data package
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools',repos="http://cran.rstudio.com")
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
require(DS705data)
# load the HealthExam data set into memory
data(HealthExam)
setwd("~/DS705/week1/download_week_01")
View(HealthExam)
View(HealthExam)
# fs variable contains the 40 women in the HealthExam dataset.
fs <- HealthExam(HealthExam$Sex==F)
# fs variable contains the 40 women in the HealthExam dataset.
fs <- HealthExam$Sex==F
# fs variable contains the 40 women in the HealthExam dataset.
fs <- HealthExam[HealthExam$Sex==F]
View(fs)
View(fs)
# fs variable contains the 40 women in the HealthExam dataset.
fs <- HealthExam[which(HealthExam$Sex==F)]
# fs variable contains the 40 women in the HealthExam dataset.
fs <- HealthExam[which(HealthExam$Sex==F),]
# fs variable contains the 40 women in the HealthExam dataset.
fs <- HealthExam[which(HealthExam$Sex=='F'),]
# fs variable contains the 40 women in the HealthExam dataset.
fs <- HealthExam[which(HealthExam$Sex=='F'),]
mean(fs$Cholesterol)
# fs variable contains the 40 women in the HealthExam dataset.
fs <- HealthExam[which(HealthExam$Sex=='F'),]
fs <- fs$Cholesterol
mean(fs)
summary(fs)
sd(fs)
hist(fs, title('Female colesterol Level'), xlab = mg/dl)
hist(fs, title('Female colesterol Level'), xlab = 'mg/dl')
hist(fs, title='Female colesterol Level', xlab = 'mg/dl')
hist(fs, ='Female colesterol Level', xlab = 'mg/dl')
hist(fs, labels = 'Female colesterol Level', xlab = 'mg/dl')
help("hist")
hist(fs, main = 'Female colesterol Level', xlab = 'mg/dl')
help("hist")
hist(fs, main = 'Female colesterol Level', xlab = 'mg/dl')
boxplot(fs, main='Female colesterol Level', ylab='mg/dl)
boxplot(fs, main='Female colesterol Level', ylab='mg/dl')
# quantile(fs,.75) gives the third quartile
# IQR(fs) gives the interquartile range
(IQR(fs)*1.5)+quantile(fs,.75)
# quantile(fs,.75) gives the third quartile
# IQR(fs) gives the interquartile range
quantile(fs,.75)
#(IQR(fs)*1.5)+quantile(fs,.75)
# quantile(fs,.75) gives the third quartile
# IQR(fs) gives the interquartile range
(IQR(fs)*1.5)+quantile(fs,.75)
# insert your code here.
(max(fs)-mean(fs))/sd(fs)
qqnorm(fs)
qqnorm(fs)
qqline(ls)
qqnorm(fs)
qqline(fs)
qqnorm(fs, ylab = 'normal scores')
qqline(fs)
qqnorm(fs, ylab = 'Standardized Residuals')
qqline(fs)
# start by copying and pasting this block of code so you can refer to it as you tweak your own code
# when you no longer want to execute this block you can delete it, or change the {r}
# to {r, include=FALSE, eval=FALSE}.  You can also minimize the whole block by clicking the little down arrow next to the line number at the beginning of the block.
# load the data and look at it
testScores <- read.csv("testScores.csv")
head(testScores)
# summarize the scores for each instructor
summary(testScores$score[testScores$instructor=="A"])
summary(testScores$score[testScores$instructor=="B"])
summary(testScores$score[testScores$instructor=="C"])
# a more advanced version of this summary by instructor would be to use tapply() to loop over the factors.
# uncomment the next line to try it
tapply(testScores$score, testScores$instructor, summary)
#  looks like the test scores across all three instructors range from 52 to 87, to make it easier to compare the distributions lets use the same bins for all three histograms
bins <- seq(50,90,by=5)
# load the data and look at it
homes <- read.csv("homes.csv")
head(homes)
# summarize the scores for each instructor
summary(testScores$score[testScores$instructor=="A"])
summary(testScores$score[testScores$instructor=="B"])
summary(testScores$score[testScores$instructor=="C"])
# a more advanced version of this summary by instructor would be to use tapply() to loop over the factors.
# uncomment the next line to try it
tapply(testScores$score, testScores$instructor, summary)
#  looks like the test scores across all three instructors range from 52 to 87, to make it easier to compare the distributions lets use the same bins for all three histograms
bins <- seq(50,90,by=5)
# load the data and look at it
homes <- read.csv("homes.csv")
head(homes)
# summarize the scores for each instructor
summary(homes$PercentOwned[homes$Year=="year1985"])
summary(homes$PercentOwned[homes$Year=="year1996"])
summary(homes$PercentOwned[homes$Year=="year2002"])
# a more advanced version of this summary by instructor would be to use tapply() to loop over the factors.
# uncomment the next line to try it
tapply(homes$PercentOwned, homes$Year, summary)
#  looks like the test scores across all three instructors range from 52 to 87, to make it easier to compare the distributions lets use the same bins for all three histograms
bins <- seq(50,90,by=5)
# load the data and look at it
homes <- read.csv("homes.csv")
head(homes)
# summarize the scores for each year
#summary(homes$PercentOwned[homes$Year=="year1985"])
#summary(homes$PercentOwned[homes$Year=="year1996"])
#summary(homes$PercentOwned[homes$Year=="year2002"])
# a more advanced version of this summary by year would be to use tapply() to loop over the factors.
# uncomment the next line to try it
tapply(homes$PercentOwned, homes$Year, summary)
#  looks like the test scores across all three instructors range from 52 to 87, to make it easier to compare the distributions lets use the same bins for all three histograms
bins <- seq(50,90,by=5)
# load the data and look at it
homes <- read.csv("homes.csv")
head(homes)
# summarize the scores for each year
#summary(homes$PercentOwned[homes$Year=="year1985"])
#summary(homes$PercentOwned[homes$Year=="year1996"])
#summary(homes$PercentOwned[homes$Year=="year2002"])
# a more advanced version of this summary by year would be to use tapply() to loop over the factors.
# uncomment the next line to try it
tapply(homes$PercentOwned, homes$Year, summary)
#  looks like the test scores across all three year range from 37.4 to 77.3, to make it easier to compare the distributions lets use the same bins for all three histograms
bins <- seq(35,80,by=5)
# start by copying and pasting this block of code so you can refer to it as you tweak your own code
# when you no longer want to execute this block you can delete it, or change the {r}
# to {r, include=FALSE, eval=FALSE}.  You can also minimize the whole block by clicking the little down arrow next to the line number at the beginning of the block.
# load the data and look at it
testScores <- read.csv("testScores.csv")
head(testScores)
# summarize the scores for each instructor
summary(testScores$score[testScores$instructor=="A"])
summary(testScores$score[testScores$instructor=="B"])
summary(testScores$score[testScores$instructor=="C"])
# a more advanced version of this summary by instructor would be to use tapply() to loop over the factors.
# uncomment the next line to try it
tapply(testScores$score, testScores$instructor, summary)
#  looks like the test scores across all three instructors range from 52 to 87, to make it easier to compare the distributions lets use the same bins for all three histograms
bins <- seq(50,90,by=5)
# load the data and look at it
homes <- read.csv("homes.csv")
head(homes)
# summarize the scores for each year
#summary(homes$PercentOwned[homes$Year=="year1985"])
#summary(homes$PercentOwned[homes$Year=="year1996"])
#summary(homes$PercentOwned[homes$Year=="year2002"])
# a more advanced version of this summary by year would be to use tapply() to loop over the factors.
# uncomment the next line to try it
tapply(homes$PercentOwned, homes$Year, summary)
#  looks like the test scores across all three year range from 37.4 to 77.3, to make it easier to compare the distributions lets use the same bins for all three histograms
homebins <- seq(35,80,by=5)
# set up R to expect an array of plots with 1 row and 3 columns
# the mar parameter adjust white space around the plot, notice that it has covered the axis labels which is OK here
par(mfrow=c(1,3),mar=c(3,3,2,1))
hist(testScores$score[testScores$instructor=="A"],main="Scores for Instructor A",breaks = bins,xlab="score", prob=TRUE)
hist(testScores$score[testScores$instructor=="B"],main="Scores for Instructor B",breaks = bins,xlab="score", prob=TRUE,ylab="")
hist(testScores$score[testScores$instructor=="C"],main="Scores for Instructor C",breaks = bins,xlab="score", prob=TRUE)
# reset to one plot
par(mfrow=c(1,1))
# set up R to expect an array of plots with 1 row and 3 columns
# the mar parameter adjust white space around the plot, notice that it has covered the axis labels which is OK here
par(mfrow=c(1,3),mar=c(3,3,2,1))
hist(homes$PercentOwned[homes$Year=="year1985"],main="Percent Owened for 1985",breaks = bins,xlab="%owned", prob=TRUE)
# set up R to expect an array of plots with 1 row and 3 columns
# the mar parameter adjust white space around the plot, notice that it has covered the axis labels which is OK here
par(mfrow=c(1,3),mar=c(3,3,2,1))
hist(homes$PercentOwned[homes$Year=="year1985"],main="Percent Owened for 1985",breaks = homebins,xlab="%owned", prob=TRUE)
hist(testScores$score[testScores$instructor=="B"],main="Scores for Instructor B",breaks = bins,xlab="score", prob=TRUE,ylab="")
hist(testScores$score[testScores$instructor=="C"],main="Scores for Instructor C",breaks = bins,xlab="score", prob=TRUE)
# reset to one plot
par(mfrow=c(1,1))
# set up R to expect an array of plots with 1 row and 3 columns
# the mar parameter adjust white space around the plot, notice that it has covered the axis labels which is OK here
par(mfrow=c(1,3),mar=c(3,3,2,1))
hist(homes$PercentOwned[homes$Year=="year1985"],main="Percent Owened for 1985",breaks = homebins,xlab="%owned", prob=TRUE)
hist(homes$PercentOwned[homes$Year=="year1996"],main="Percent Owened for 1996",breaks = homebins,xlab="%owned", prob=TRUE)
hist(homes$PercentOwned[homes$Year=="year2002"],main="Percent Owened for 2002",breaks = homebins,xlab="%owned", prob=TRUE)
# reset to one plot
par(mfrow=c(1,1))
# make side-by-side boxplots to make comparisons easier
boxplot(testScores$score~testScores$instructor,names=c("Instructor A","Instructor B","Instructor C"),ylab="score",main="Test Scores")
# make side-by-side boxplots to make comparisons easier
boxplot(homes$PercentOwned~homes$Year,names=c("1985","1996","2002"),ylab="%Owend",main="Percent Ownership")
# insert your code here.
rnorm(250, mean = 268, sd = 16)
# insert your code here.
rnorm(250, mean = 268, sd = 16)
help(rnorm)
# insert your code here.
pnorm(250, mean = 268, sd = 16)
help(rnorm)
# insert your code here.
pnorm(250, mean = 268, sd = 16)
# insert your code here.
pnorm(250, mean = 268, sd = 16, lower.tail = TRUE)
# insert your code here.
pnorm(249, mean = 268, sd = 16, lower.tail = TRUE)
# insert your code here.
pnorm(249.9, mean = 268, sd = 16, lower.tail = TRUE)
# insert your code here.
pnorm(249.99, mean = 268, sd = 16, lower.tail = TRUE)
# insert your code here.
pnorm(249.9, mean = 268, sd = 16, lower.tail = TRUE)
# insert your code here.
pnorm(249.9999, mean = 268, sd = 16, lower.tail = TRUE)
# insert your code here.
pnorm(249.999999999, mean = 268, sd = 16, lower.tail = TRUE)
# insert your code here.
pnorm(280, mean = 268, sd = 16, lower.tail = TRUE)-pnorm(260, mean = 268, sd = 16, lower.tail = FALSE)
# insert your code here.
pnorm(280, mean = 268, sd = 16, lower.tail = TRUE)-pnorm(260, mean = 268, sd = 16, lower.tail = TRUE)
# insert your code here.
1-pnorm(250, mean = 268, sd = 16, lower.tail = FALSE)
# insert your code here.
qnorm(.9,mean = 268, sd = 16)
# insert your code here.
qnorm(.9,mean = 268, sd = 16, lower.tail = TRUE)
# insert your code here.
qnorm(.9,mean = 268, sd = 16, lower.tail = FALSE)
# insert your code here.
qnorm(.9,mean = 268, sd = 16, lower.tail = TRUE)
# insert your code here.
read.csv(bodyFat.csv)
# insert your code here.
read.csv("bodyFat.csv"")
# insert your code here.
read.csv("bodyFat.csv")
# insert your code here.
bodyFat <- read.csv("bodyFat.csv")
View(bodyFat)
View(bodyFat)
# insert your code here.
bodyFat <- read.csv("bodyFat.csv")
# insert your code here.
bodyFat <- read.csv("bodyFat.csv")
# insert your code here.
bodyFat <- read.csv("bodyFat.csv")
bfat <- bodyFat$bodyFat
# insert your code here.
hist(bfat)
# insert your code here.
qqnorm(bfat)
qqline(bfat)
1-pnorm(250, mean = 268, sd = 16, lower.tail = FALSE)
pnorm(74, mean = 70, sd = 3, lower.tail = FALSE)
seq(5,15,by=2)
length(seq(5,15,by=2))
x <- c(3,6,10,11,12,23)
x[x>10 & x<20]
28-10
18*1.5
