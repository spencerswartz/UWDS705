head(BirdPecks)
load('BirdPecks.rda')
head(BirdPecks)
load('BirdPecks.rda')
#head(BirdPecks)
par(mfrow=c(2,1))
boxplot(BirdPecks)
hist(BirdPecks)
load('BirdPecks.rda')
head(BirdPecks)
par(mfrow=c(2,1))
boxplot(BirdPecks)
hist(BirdPecks)
load('BirdPecks.rda')
#head(BirdPecks)
par(mfrow=c(2,2))
boxplot(BirdPecks$pecks[BirdPecks$group==1])
boxplot(BirdPecks$pecks[BirdPecks$group==2])
hist(BirdPecks$pecks[BirdPecks$group==1])
hist(BirdPecks$pecks[BirdPecks$group==2])
par(mfrow=c(1,1))
load('BirdPecks.rda')
#head(BirdPecks)
par(mfrow=c(2,2),mar=c(4,4,1,1))
boxplot(BirdPecks$pecks[BirdPecks$group==1])
boxplot(BirdPecks$pecks[BirdPecks$group==2])
hist(BirdPecks$pecks[BirdPecks$group==1])
hist(BirdPecks$pecks[BirdPecks$group==2])
par(mfrow=c(1,1))
load('BirdPecks.rda')
#head(BirdPecks)
par(mfrow=c(2,2),mar=c(4,4,1,1))
boxplot(BirdPecks$pecks[BirdPecks$group==1],ylab="# of pecks", main="Group 1")
boxplot(BirdPecks$pecks[BirdPecks$group==2],ylab="# of pecks", main="Group 2")
hist(BirdPecks$pecks[BirdPecks$group==1])
hist(BirdPecks$pecks[BirdPecks$group==2])
par(mfrow=c(1,1))
load('BirdPecks.rda')
#head(BirdPecks)
par(mfrow=c(2,2),mar=c(4,4,1,1))
boxplot(BirdPecks$pecks[BirdPecks$group==1],ylab="# of pecks", main="Group 1")
boxplot(BirdPecks$pecks[BirdPecks$group==2],ylab="# of pecks", main="Group 2")
hist(BirdPecks$pecks[BirdPecks$group==1],xlab="# of pecks", main="Group 1")
hist(BirdPecks$pecks[BirdPecks$group==2],xlab="# of pecks", main="Group 2")
par(mfrow=c(1,1))
# Don't modify this chunk of code, it is just installing and loading the DS705data package
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools',repos="http://cran.rstudio.com")
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
require(DS705data)
data(WormSheep)
boxplot(worms~treated,data=WormSheep)
wormsT <- WormSheep$worms[WormSheep$treated=="treated"]
wormsUT <- WormSheep$worms[WormSheep$treated=="untreated"]
hist(wormsT,main="Treated Sheep",xlab="Worms")
hist(wormsUT,main="Treated Sheep",xlab="Worms")
shapiro.test(wormsT)
shapiro.test(wormsUT)
pT <- shapiro.test(wormsT)$p.value
pUT <- shapiro.test(wormsUT)$p.value
library(car)
leveneTest(worms~treated,data=WormSheep)
plT <- unlist(leveneTest(worms~treated,data=WormSheep))[5]
test <- t.test(worms~treated,data=WormSheep,var.equal=TRUE)
test
data(Typing)
boxplot(Words~Method,data=Typing)
typingP <- Typing$Words[Typing$Method=="prior course"]
typingS <- Typing$Words[Typing$Method=="self-taught"]
hist(typingP,main="Prior Course",xlab="Words per minute")
hist(typingS,main="Self-Taught",xlab="Words per minute")
shapiro.test(typingP)
shapiro.test(typingS)
pP <- shapiro.test(typingP)$p.value
pS <- shapiro.test(typingS)$p.value
leveneTest(Words~Method,data=Typing)
plT2 <- unlist(leveneTest(Words~Method,data=Typing))[5]
test2 <- t.test(Words~Method,data=Typing,var.equal=FALSE,conf.level=0.9,alternative='greater')
test2
test2 <- t.test(Words~Method,data=Typing,var.equal=FALSE,conf.level=0.9,alternative='two.sided')
View(WormSheep)
library(car)
leveneTest(BirdPecks$pecks~BirdPecks$group)
pecks1 <- BirdPecks$pecks[BirdPecks$group==1]
pecks2 <- BirdPecks$pecks[BirdPecks$group==2]
shapiro.test(pecks1)
shapiro.test(pecks2)
pecks1 <- BirdPecks$pecks[BirdPecks$group==1]
pecks2 <- BirdPecks$pecks[BirdPecks$group==2]
shapiro.test(pecks1)
shapiro.test(pecks2)
require(DS705data)
data(AnkleMovement)
# I like to add the new data to the data frame to keep everything together
AnkleMovement$diff <- AnkleMovement$tape-AnkleMovement$spat
boxplot(AnkleMovement$diff)
hist(AnkleMovement$diff)
test <-t.test(AnkleMovement$diff,mu=0,alternative="two.sided",conf.level=0.9)
test
data(BackUp)
BackUp <- data.frame(BackUp) # BackUp is imported as a matrix, so this converts it to a data frame
BackUp$diff <- BackUp$pre-BackUp$post
hist(BackUp$diff)
boxplot(BackUp$diff)
test <- wilcox.test(BackUp$diff,mu=0,conf.int=TRUE,conf.level=0.95) # the confidence level does not change the P value
test
peckdiff <- pecks1 - pecks2
t.test(peckdiff,mu=0,alternative="two.sided",conf.level=0.9)
peckdiff <- pecks1 - pecks2
length(pecks1)
length(pecks2)
t.test(peckdiff,mu=0,alternative="two.sided",conf.level=0.9)
peckdiff <- pecks1 - pecks2
print(peckdiff)
print(pecks1)
print(pecks2)
t.test(peckdiff,mu=0,alternative="two.sided",conf.level=0.9)
t.test(peckdiff,mu=0,conf.level=0.9,var.equal=TRUE)
t.test(pecks~group,data = BirdPecks,conf.level=0.9,var.equal=TRUE)
load("StrengthSpeed.rda")
head(StrengthSeed)
load("StrengthSpeed.rda")
head(StrengthSpeed)
#AnkleMovement$diff <- AnkleMovement$tape-AnkleMovement$spat
load("StrengthSpeed.rda")
#head(StrengthSpeed)
StrengthSpeed$diff <- AnkleMovement$before-AnkleMovement$after
load("StrengthSpeed.rda")
#head(StrengthSpeed)
StrengthSpeed$diff <- StrengthSpeed$before-StrengthSpeed$after
par(mfrow=c(1,2))
boxplot(StrengthSpeed$diff)
hist(StrengthSpeed$diff)
par(mfrow=c(1,1))
load("StrengthSpeed.rda")
#head(StrengthSpeed)
StrengthSpeed$diff <- StrengthSpeed$before-StrengthSpeed$after
par(mfrow=c(1,2))
boxplot(StrengthSpeed$diff)
hist(StrengthSpeed$diff)
par(mfrow=c(1,1))
shapiro.test(StrengthSpeed$diff)
t.test(StrengthSpeed$diff,mu=0,alternative="two.sided",conf.level=0.9)
t.test(StrengthSpeed$diff,mu=0,alternative="two.sided",conf.level=0.95)
test <-t.test(AnkleMovement$diff,mu=0,alternative="two.sided",conf.level=0.9)
test
View(AnkleMovement)
View(AnkleMovement)
t.test(StrengthSpeed$after,StrengthSpeed$before,alternative = "greater")
t.test(StrengthSpeed$after,StrengthSpeed$before,alternative = "greater",paired=TRUE)
load("StrengthSpeed.rda")
#head(StrengthSpeed)
StrengthSpeed$diff <- StrengthSpeed$after-StrengthSpeed$before
par(mfrow=c(1,2))
boxplot(StrengthSpeed$diff)
hist(StrengthSpeed$diff)
par(mfrow=c(1,1))
shapiro.test(StrengthSpeed$diff)
t.test(StrengthSpeed$after,StrengthSpeed$before,alternative = "greater",paired=TRUE)
View(StrengthSpeed)
students1 <- c(79, 76, 74, 70, 81, 85, 73, 78, 69, 72, 83, 89, 72, 79, 75)
students2 <- c(78, 96, 85, 91, 77,103, 72, 93, 98, 86, 70, 110, 70, 91, 99)
studentsdf <- data.frame(students1,students2)
head(studentsdf)
par(mfrow=c(2,2))
boxplot(students1)
boxplot(students2)
hist(students1)
hist(students2)
par(mfrow=c(1,1))
students <- c(79, 76, 74, 70, 81, 85, 73, 78, 69, 72, 83, 89, 72, 79, 75, 78, 96, 85, 91, 77,103, 72, 93, 98, 86, 70, 110, 70, 91, 99)
group <- c('g1','g1','g1','g1','g1','g1','g1','g1','g1','g1','g1','g1','g1','g1','g1','g2','g2','g2','g2','g2','g2','g2','g2','g2','g2','g2','g2','g2','g2','g2')
studentsdf <- data.frame(students,group)
head(studentsdf)
par(mfrow=c(2,2))
boxplot(studentsdf$students[studentsdf$group=='g1'])
boxplot(studentsdf$students[studentsdf$group=='g2'])
hist(studentsdf$students[studentsdf$group=='g1'])
hist(studentsdf$students[studentsdf$group=='g2'])
par(mfrow=c(1,1))
par(mfrow=c(2,2))
boxplot(studentsdf$students[studentsdf$group=='g1'])
boxplot(studentsdf$students[studentsdf$group=='g2'])
hist(studentsdf$students[studentsdf$group=='g1'])
hist(studentsdf$students[studentsdf$group=='g2'])
par(mfrow=c(1,1))
shapiro.test(studentsdf$students[studentsdf$group=='g1'])
shapiro.test(studentsdf$students[studentsdf$group=='g2'])
par(mfrow=c(2,2))
boxplot(studentsdf$students[studentsdf$group=='g1'])
boxplot(studentsdf$students[studentsdf$group=='g2'])
hist(studentsdf$students[studentsdf$group=='g1'])
hist(studentsdf$students[studentsdf$group=='g2'])
par(mfrow=c(1,1))
shapiro.test(studentsdf$students[studentsdf$group=='g1'])
shapiro.test(studentsdf$students[studentsdf$group=='g2'])
leveneTest(students~group,data=studentsdf)
t.test(students~group,data=studentsdf ,var.equal=FALSE)
t.test(students~group,data=studentsdf ,var.equal=FALSE)
t.test(studentsdf$students[studentsdf$group=='g2'],var.equal=FALSE)
t.test(studentsdf$students[studentsdf$group=='g2'])
# Don't modify this chunk of code, it is just installing and loading the DS705data package
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools',repos="http://cran.rstudio.com")
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
require(DS705data)
data(WormSheep)
boxplot(worms~treated,data=WormSheep)
wormsT <- WormSheep$worms[WormSheep$treated=="treated"]
wormsUT <- WormSheep$worms[WormSheep$treated=="untreated"]
hist(wormsT,main="Treated Sheep",xlab="Worms")
hist(wormsUT,main="Treated Sheep",xlab="Worms")
shapiro.test(wormsT)
shapiro.test(wormsUT)
pT <- shapiro.test(wormsT)$p.value
pUT <- shapiro.test(wormsUT)$p.value
library(car)
leveneTest(worms~treated,data=WormSheep)
plT <- unlist(leveneTest(worms~treated,data=WormSheep))[5]
test <- t.test(worms~treated,data=WormSheep,var.equal=TRUE)
test
data(Typing)
boxplot(Words~Method,data=Typing)
typingP <- Typing$Words[Typing$Method=="prior course"]
typingS <- Typing$Words[Typing$Method=="self-taught"]
hist(typingP,main="Prior Course",xlab="Words per minute")
hist(typingS,main="Self-Taught",xlab="Words per minute")
shapiro.test(typingP)
shapiro.test(typingS)
pP <- shapiro.test(typingP)$p.value
pS <- shapiro.test(typingS)$p.value
leveneTest(Words~Method,data=Typing)
plT2 <- unlist(leveneTest(Words~Method,data=Typing))[5]
test2 <- t.test(Words~Method,data=Typing,var.equal=FALSE,conf.level=0.9,alternative='greater')
test2
test2 <- t.test(Words~Method,data=Typing,var.equal=FALSE,conf.level=0.9,alternative='two.sided')
test2 <- t.test(Words~Method,data=Typing,var.equal=FALSE,conf.level=0.9,alternative='two.sided')
test2 <- t.test(Words~Method,data=Typing,var.equal=FALSE,conf.level=0.9,alternative='greater')
test2
test2 <- t.test(Words~Method,data=Typing,var.equal=FALSE,conf.level=0.9,alternative='two.sided')
# Don't modify this chunk of code, it is just installing and loading the DS705data package
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools',repos="http://cran.rstudio.com/")
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
require(DS705data)
# load the HealthExam data set into memory
data(HealthExam)
# r defaults to a 7 by 7 figure (units?), use fig.width and fig.height to adjust
reps <- 1000
n <- 23
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
hist(rexp(1000))
reps <- 1000
n <- 10
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
qqnorm(sampleStat)
qqline(sampleStat)
reps <- 1000
n <- 200
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
qqnorm(sampleStat)
qqline(sampleStat)
s <- 0.7
zcrit <- qnorm(0.975) # the 95% critical value has cumulative probability 0.975 (draw a picture - we want the value that corresponds to 2.5% in each tail)
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
s <- 0.68
xbar <- 5.03
x <- rnorm(n)
x <- ( x - mean(x) ) / sd(x) # use the z-score formula to standardize the sample to have mean 0 and standard devition 1
x <- s * x + xbar # rescale x and then shift it
mean(x)
sd(x)
t.test(x)$conf.int
# load csv into data frame
df <- read.csv('ex5-29.TXT')
s <- sd(studentsdf$students[studentsdf$group=='g2'])
s
zcrit <- qnorm(0.975) # the 95% critical value has cumulative probability 0.975 (draw a picture - we want the value that corresponds to 2.5% in each tail)
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
s <- sd(studentsdf$students[studentsdf$group=='g2'])
s
zcrit <- qnorm(0.975)
zcrit
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
s <- sd(studentsdf$students[studentsdf$group=='g2'])
zcrit <- qnorm(0.975)
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
n
s <- sd(studentsdf$students[studentsdf$group=='g2'])
s
zcrit <- qnorm(0.975)
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
n
s <- 0.7
zcrit <- qnorm(0.975) # the 95% critical value has cumulative probability 0.975 (draw a picture - we want the value that corresponds to 2.5% in each tail)
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
n
s <- sd(studentsdf$students[studentsdf$group=='g2'])
zcrit <- qnorm(0.975)
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
s <- sd(studentsdf$students[studentsdf$group=='g2'])
zcrit <- qnorm(0.975)
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
n
s <- 0.68
xbar <- 5.03
x <- rnorm(n)
x <- ( x - mean(x) ) / sd(x) # use the z-score formula to standardize the sample to have mean 0 and standard devition 1
x <- s * x + xbar # rescale x and then shift it
mean(x)
sd(x)
t.test(x)$conf.int
s <- sd(studentsdf$students[studentsdf$group=='g2'])
s
zcrit <- qnorm(0.975)
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
n
xbar <- mean(studentsdf$students[studentsdf$group=='g2'])
xbar
x <- rnorm(n)
x <- ( x - mean(x) ) / sd(x)
x <- s * x + xbar
mean(x)
sd(x)
t.test(x)$conf.int
t.test(studentsdf$students[studentsdf$group=='g2'], mu = 92, alternative = 'less')
t.test(studentsdf$students[studentsdf$group=='g2'], mu = 92, alternative = 'greater')
t.test(studentsdf$students[studentsdf$group=='g2'], mu = 92, alternative = 'less')
test <- t.test(lead,mu=30,alternative="greater")
# Don't modify this chunk of code, it is just installing and loading the DS705data package
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools',repos="http://cran.rstudio.com/")
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
require(DS705data)
# load the HealthExam data set into memory
data(HealthExam)
# r defaults to a 7 by 7 figure (units?), use fig.width and fig.height to adjust
reps <- 1000
n <- 23
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
hist(rexp(1000))
reps <- 1000
n <- 10
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
qqnorm(sampleStat)
qqline(sampleStat)
reps <- 1000
n <- 200
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
qqnorm(sampleStat)
qqline(sampleStat)
s <- 0.7
zcrit <- qnorm(0.975) # the 95% critical value has cumulative probability 0.975 (draw a picture - we want the value that corresponds to 2.5% in each tail)
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
n
s <- 0.68
xbar <- 5.03
x <- rnorm(n)
x <- ( x - mean(x) ) / sd(x) # use the z-score formula to standardize the sample to have mean 0 and standard devition 1
x <- s * x + xbar # rescale x and then shift it
mean(x)
sd(x)
t.test(x)$conf.int
# load csv into data frame
df <- read.csv('ex5-29.TXT')
test <- t.test(lead,mu=30,alternative="greater")
# Don't modify this chunk of code, it is just installing and loading the DS705data package
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools',repos="http://cran.rstudio.com/")
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
require(DS705data)
# load the HealthExam data set into memory
data(HealthExam)
# r defaults to a 7 by 7 figure (units?), use fig.width and fig.height to adjust
reps <- 1000
n <- 23
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
hist(rexp(1000))
reps <- 1000
n <- 10
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
qqnorm(sampleStat)
qqline(sampleStat)
reps <- 1000
n <- 200
sampleStat <- numeric(reps) # initialize the vector
for (i in 1:reps){
sampleStat[i] <- mean( rexp(n) )
}
hist(sampleStat)
qqnorm(sampleStat)
qqline(sampleStat)
s <- 0.7
zcrit <- qnorm(0.975) # the 95% critical value has cumulative probability 0.975 (draw a picture - we want the value that corresponds to 2.5% in each tail)
E <- 0.05
n <- ceiling ( ( s * zcrit / E )^2 )
n
s <- 0.68
xbar <- 5.03
x <- rnorm(n)
x <- ( x - mean(x) ) / sd(x) # use the z-score formula to standardize the sample to have mean 0 and standard devition 1
x <- s * x + xbar # rescale x and then shift it
mean(x)
sd(x)
t.test(x)$conf.int
# load csv into data frame
df <- read.csv('ex5-29.TXT')
ci <- unname( t.test( lead, conf.level = 0.8)$conf.int )
# load csv into data frame
df <- read.csv('ex5-29.TXT')
load('diffs.rda')
head(diffs)
load('diffs.rda')
head(diffs)
par(mfrow=c(2,1))
boxplot(diffs)
hist(diffs)
load('diffs.rda')
head(diffs)
par(mfrow=c(1,2))
boxplot(diffs)
hist(diffs)
load('diffs.rda')
head(diffs)
par(mfrow=c(1,2))
boxplot(diffs$diff)
hist(diffs$diff)
par(mfrow=c(1,1))
hist(BackUp$diff)
boxplot(BackUp$diff)
load('diffs.rda')
head(diffs)
par(mfrow=c(1,2))
boxplot(diffs$diff)
hist(diffs$diff)
par(mfrow=c(1,1))
shapiro.test(diffs$diff)
leveneTest(diffs$diff)
load('diffs.rda')
head(diffs)
par(mfrow=c(1,2))
boxplot(diffs$diff)
hist(diffs$diff)
par(mfrow=c(1,1))
shapiro.test(diffs$diff)
hist(BackUp$diff)
boxplot(BackUp$diff)
wilcox.test(diffs$diff,mu=0,conf.int=TRUE,conf.level=0.95, alternative = 'Greater')
wilcox.test(diffs$diff,mu=0,conf.int=TRUE,conf.level=0.95, alternative = 'greater')
wilcox.test(diffs$diff,mu=0,conf.int=TRUE, alternative = 'greater')
