install.packages('MASS')
library(MASS)
}
data(Cars93)
Cars93 <- Cars93[Cars93$Type != 'Van',]
Cars93$Type <- factor(Cars93$Type) # recasting Type forces the factor levels to reset
# shorten level labels to make them fit on boxplots
# Cm = Compact
# Lg = Large
# Md = Midsize
# Sm = Small
# Sp = Sporty
Cars93$Type <- factor(Cars93$Type,labels=c('Cm','Lg','Md','Sm','Sp'))
View(Cars93)
attach(Cars93)
summary(Price) # Price is one of the variables in the Cars93 data frame, after attaching we don't have to refer to the data frame.  Don't forget to detach(Cars93) after you're done.
source('onewayComp.R')
source('onewayComp.R')
onewayComp(RPM~Type)
install("multcompView)
install("multcompView")
install.packages("multcompView")
library(multcompView)
require(multcompView)
posthoc <- onewayComp(RPM~Type,adjust = 'one.step')
padj_extract <- function(formula,data){posthoc$comp[,'p_adj']}
multcompBoxplot(RPM~Type,horizontal = TRUE, compFn = "padj_extract")
require(multcompView)
posthoc <- onewayComp(RPM~Type,adjust = 'one.step')
padj_extract <- function(formula,data){posthoc$comp[,'p_adj']}
multcompBoxplot(RPM~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
require(multcompView)
posthoc <- onewayComp(RPM~Type,adjust = 'one.step')
posthoc$comp[,c(1,6,7)]
padj_extract <- function(formula,data){posthoc$comp[,'p_adj']}
multcompBoxplot(RPM~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
source('regwqComp.R')
require(multcompView)
set.seed(0)
posthoc <- onewayComp(RPM~Type,adjust = 'one.step')
posthoc$comp[,c(1,6,7)]
padj_extract <- function(formula,data){posthoc$comp[,'p adj']}
multcompBoxplot(RPM~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
source('regwqComp.R')
newposthoc <- regwqComp(RPM~Type)
newposthoc$comp[c(1,4,5,6)]
source('regwqComp.R')
newposthoc <- regwqComp(RPM~Type)
newposthoc[c(1,4,5,6)]
source('regwqComp.R')
newposthoc <- regwqComp(RPM~Type)
newposthoc[,c(1,4,5,6)]
boxplot(Price~Type,horizontal=TRUE)
TukeyHSD(aov(Price~Type, data = Cars93))$group
TukeyHSD(aov(Price~Type, data = Cars93))
TukeyHSD(aov(Price~Type, data = Cars93))$Type
posthoc <- TukeyHSD(aov(Price~Type, data = Cars93))
padj_extract <- function(formula,data){posthoc$comp[,'p adj']}
multcompBoxplot(RPM~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'one.step')
posthoc$comp[,c(1,6,7)]
padj_extract <- function(formula,data){posthoc$comp[,'p adj']}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'one.step')
posthoc$comp[,c(1,6,7)]
padj_extract <- function(formula,data){posthoc$comp[,'p adj']/2}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'one.step')
posthoc$comp[,c(1,6,7)]
padj_extract <- function(formula,data){posthoc$comp[,'p adj']}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'one.step')
posthoc$comp[,c(1,6,7)]
padj_extract <- function(formula,data){posthoc$comp[,'p adj']/2}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'one.step')
posthoc$comp[,c(1,6,7)]
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'one.step')
posthoc
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'one.step')
posthoc$comp[,c(1,6,7)]
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'one.step')
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
onewayComp(Price~Type,adjust = 'one.step', nboot = 10000)
posthoc <- onewayComp(Price~Type,adjust = 'one.step',nboot = 10000)
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
oneway.test(Price~Type,adjust = 'bonferroni')
oneway.test(Price~Type,adjust = 'bonferroni',con = K)
onewayComp(Price~Type,adjust = 'bonferroni',con = K)
onewayComp(Price~Type,adjust = 'bonferroni')
onewayComp(Price~Type,adjust = 'bonferroni')$comp
posthoc <- TukeyHSD(aov(Price~Type, data = Cars93))$Type
posthoc$Type
posthoc <- TukeyHSD(aov(Price~Type, data = Cars93))$Type
padj_extract <- function(formula,data){(posthoc$Type[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- TukeyHSD(aov(Price~Type, data = Cars93))$Type
padj_extract <- function(formula,data){(posthoc[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'bonferroni')
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- TukeyHSD(aov(Price~Type, data = Cars93))$Type
TukeyHSD(aov(Price~Type, data = Cars93))$Type
padj_extract <- function(formula,data){(posthoc[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
onewayComp(Price~Type,adjust = 'holm')$comp
posthoc <- onewayComp(Price~Type,adjust = 'holm')
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'holm')
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
levels(Type)
K = rbind('ave SmCm -ave SpLgMd'=c(-1/2,-1/2, 1/2, 1/2),
'       Md - Cm'=c(  -1,   1,   0,   0))
levels(Type)
K = rbind('ave SmCm -ave SpLgMd'=c(1/2,-1/3,-1/3, 1/2,-1/3),
'       Md - Cm'=c(-1,0,1,0,0))
levels(Type)
K = rbind('ave SmCm -ave SpLgMd'=c(1/2,-1/3,-1/3, 1/2,-1/3),
'       Md - Cm'=c(-1,0,1,0,0))
posthoc <- onewayComp(Price~Type,adjust = 'holm', con=K,nboot = 10000, var.equal = FALSE)
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
levels(Type)
K = rbind('ave SmCm -ave SpLgMd'=c(1/2,-1/3,-1/3, 1/2,-1/3),
'       Md - Cm'=c(-1,0,1,0,0))
posthoc <- onewayComp(Price~Type,adjust = 'holm', con=K,nboot = 10000, var.equal = FALSE)
posthoc
#padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
#multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
levels(Type)
K = rbind('ave SmCm - ave SpLgMd'=c(1/2,-1/3,-1/3, 1/2,-1/3),
'       Md - Cm'=c(-1,0,1,0,0))
posthoc <- onewayComp(Price~Type,adjust = 'holm', con=K,nboot = 10000, var.equal = FALSE)
posthoc$comp
#padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
#multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
levels(Type)
K = rbind('ave SmCm - ave SpLgMd'=c(1/2,-1/3,-1/3, 1/2,-1/3),
'       Md - Cm'=c(-1,0,1,0,0))
posthoc <- onewayComp(Price~Type,adjust = 'holm', con=K,nboot = 10000, var.equal = FALSE)
posthoc$comp <- posthoc$comp[,'p adj']/2
posthoc
#padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
#multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
levels(Type)
K = rbind('ave SmCm - ave SpLgMd'=c(1/2,-1/3,-1/3, 1/2,-1/3),
'       Md - Cm'=c(-1,0,1,0,0))
posthoc <- onewayComp(Price~Type,adjust = 'holm', con=K,nboot = 10000, var.equal = FALSE)
posthoc$comp <- posthoc$comp[,'p adj']/2
posthoc$comp
#padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
#multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
levels(Type)
K = rbind('ave SmCm - ave SpLgMd'=c(1/2,-1/3,-1/3, 1/2,-1/3),
'       Md - Cm'=c(-1,0,1,0,0))
posthoc <- onewayComp(Price~Type,adjust = 'holm', con=K,nboot = 10000, var.equal = FALSE)
posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc$comp
#padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
#multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
levels(Type)
K = rbind('ave SmCm - ave SpLgMd'=c(1/2,-1/3,-1/3, 1/2,-1/3),
'       Md - Cm'=c(-1,0,1,0,0))
posthoc <- onewayComp(Price~Type,adjust = 'holm', con=K,nboot = 10000, var.equal = FALSE)
#posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc$comp
#padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
#multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
levels(Type)
K = rbind('ave SmCm - ave SpLgMd'=c(1/2,-1/3,-1/3, 1/2,-1/3),
'       Md - Cm'=c(-1,0,1,0,0))
posthoc <- onewayComp(Price~Type,adjust = 'holm', con=K,nboot = 10000, var.equal = FALSE)
posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc$comp
#padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
#multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'holm')
posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'holm')
posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc$comp
posthoc <- TukeyHSD(aov(Price~Type, data = Cars93))$Type
posthoc[,'p adj'] <- posthoc[,'p adj']/2
posthoc
padj_extract <- function(formula,data){(posthoc[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
if (!require(MASS)){
install.packages('MASS')
library(MASS)
}
data(Cars93)
Cars93 <- Cars93[Cars93$Type != 'Van',]
Cars93$Type <- factor(Cars93$Type) # recasting Type forces the factor levels to reset
# shorten level labels to make them fit on boxplots
# Cm = Compact
# Lg = Large
# Md = Midsize
# Sm = Small
# Sp = Sporty
Cars93$Type <- factor(Cars93$Type,labels=c('Cm','Lg','Md','Sm','Sp'))
attach(Cars93)
summary(Price) # Price is one of the variables in the Cars93 data frame, after attaching we don't have to refer to the data frame.  Don't forget to detach(Cars93) after you're done.
source('onewayComp.R')
onewayComp(RPM~Type)
require(multcompView)
set.seed(0)
posthoc <- onewayComp(RPM~Type,adjust = 'one.step')
posthoc$comp[,c(1,6,7)]
padj_extract <- function(formula,data){posthoc$comp[,'p adj']}
multcompBoxplot(RPM~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
source('regwqComp.R')
newposthoc <- regwqComp(RPM~Type)
newposthoc[,c(1,4,5,6)]
boxplot(Price~Type,horizontal=TRUE)
posthoc <- TukeyHSD(aov(Price~Type, data = Cars93))$Type
posthoc[,'p adj'] <- posthoc[,'p adj']/2
posthoc
onewayComp(Price~Type,adjust = 'one.step', nboot = 10000)
posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc <- onewayComp(Price~Type,adjust = 'one.step', nboot = 10000)
posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'holm')
posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- TukeyHSD(aov(Price~Type, data = Cars93))$Type
posthoc
padj_extract <- function(formula,data){(posthoc[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'one.step', nboot = 10000)
posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
posthoc <- onewayComp(Price~Type,adjust = 'holm')
posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc$comp
padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
levels(Type)
K = rbind('ave SmCm - ave SpLgMd'=c(1/2,-1/3,-1/3, 1/2,-1/3),
'       Md - Cm'=c(-1,0,1,0,0))
posthoc <- onewayComp(Price~Type,adjust = 'holm', con=K,nboot = 10000, var.equal = FALSE)
posthoc$comp[,'p adj'] <- posthoc$comp[,'p adj']/2
posthoc$comp
#padj_extract <- function(formula,data){(posthoc$comp[,'p adj']/2)}
#multcompBoxplot(Price~Type,data = Cars93 ,horizontal = TRUE, compFn = "padj_extract")
install.packages('boot')
require('boot')
require('boot')
require('boot')
bootMedian <- function(x,i){median(x[i])}
bootobject <- boot(Price[Type=='Md'],bootMedian,R=5000)
head(bootobject)
require('boot')
bootMedDiff <- function(d,i){
# d is a dataframe with
#    quantitative variable in column 1
#    factor variable in column 2
meds <- tapply(d[i,1],d[,2],median)
c( meds[1]-meds[4], meds[5]-meds[4], meds[3]-meds[5], meds[3]-meds[1])
}
set.seed(1)
boot.object <- boot(Cars93, bootMedDiff, R = 5000,
strata = Cars93$Type)
set.seed(554)
x <- rnorm(100); group <- factor( rep( LETTERS[1:5], each=20 ) )
tapply(x, group, mean)
par(mar=c(2,2,.1,0)) # adjust margins
boxplot(x~group)
# this is just tricks to trim the output to fit on one slide
require(utils)
tmp <- noquote(
capture.output(
t.test( x[ group=='A' ], x[ group=='B' ])
)
)
write.table(tmp[2:8],quote=F,row.names=F,col.names=F)
pairwise.t.test( x, group, p.adjust.method='none',
conf.level=.95)$p.value
pairwise.t.test( x, group, p.adjust.method='none',
conf.level=.95)$p.value
pairwise.t.test( x, group, p.adjust.method='bonferroni',
conf.level=.95)$p.value
scoreInc <- c(c(7,2,2,6,16,11,9,0,4,2),
c(5,2,3,11,16,11,3),
c(9,12,2,17,12,20,20,31,21),
c(17,19,26,1,47,27,-8,10,20) )
group <- factor(c( rep("L",10),
rep("LR",7),
rep("LC",9),
rep("C",9)),levels = c("L","LR","LC","C"))
d <- data.frame(scoreInc,group)
par(mar=c(4,4,0,0))
#boxplot(scoreInc~group,data=d,at=c(4,1,3,2))
boxplot(scoreInc~group,data=d)
title(xlab="Teaching Method",ylab="Score Change")
TukeyHSD(aov(scoreInc~group, data=d))$group
source('./onewayComp.R') # included in weekly download
onewayComp(scoreInc~group, data=d, var.equal=T)$comp[,c(1,2,3,6)]
onewayComp(scoreInc~group, data=d, var.equal=F)$comp[,c(1,2,3,6)]
pain <- c( 3, 5, 1, 8, 1, 1, 4, 9,
2,12,13, 6,10, 7,11,19,
14, 6,12, 4,19, 3, 9,21,
29,20,36,21,25,18,26,17,
24,26,40,32,20,33,27,30)
treat <- factor( rep( c('MS','MM','SS','SM','McM'),
each = 8),
levels = c('MS','MM','SS','SM','McM')  )
morph <- data.frame(pain,treat)
par(mar=c(3,2,0.5,0))
boxplot(pain~treat,data=morph)
K = rbind('ave2 -ave3'=c(-1/3,-1/3,-1/3,1/2,1/2),
' McM - MM' =c(   0,  -1,   0,  0,  1),
'  SS - MS' =c(  -1,   0,   1,  0,  0),
'  MM - SS' =c(   0,   1,  -1,  0,  0) )
require(multcomp) # install package if necessary
# setup oneway ANOVA
amod <- aov(pain ~ treat, data = morph)
comp.glht <- glht( amod, linfct = mcp( treat = K) )
head(contacts)
contacts <- read.csv('./ex8-27.TXT')
contacts <- contacts[,c(4,2)]
par(mar=c(4,4,.5,.5))
boxplot(Response~Supplier,data=contacts,horizontal=TRUE,main="",
xlab='Power deviation',ylab='Supplier')
require(boot)
bootMedDiff <- function(d,i){
# d is a dataframe with
#    quantitative variable in column 1
#    factor variable in column 2
meds <- tapply(d[i,1],d[,2],median)
c( meds[3]-meds[1], meds[3]-meds[2], meds[1]-meds[2])
}
set.seed(1)
head(contacts)
boot.object <- boot(contacts, bootMedDiff, R = 5000,
strata = contacts$Supplier)
# med_C - med_A
boot.ci(boot.object,conf = 1 - .05/3, type='bca', index=1)$bca[4:5]
# med_C - med_B
boot.ci(boot.object,conf = 1 - .05/3, type='bca', index=2)$bca[4:5]
# med_A - med_B (= 6)
boot.ci(boot.object,conf = 1 - .05/3, type='bca', index=3)$bca[4:5]
require('boot')
bootCars <- Cars93['Price','Type']
head(bootCars)
bootMedDiff <- function(d,i){
# d is a dataframe with
#    quantitative variable in column 1
#    factor variable in column 2
meds <- tapply(d[i,1],d[,2],median)
c( meds[1]-meds[4], meds[5]-meds[4], meds[3]-meds[5], meds[3]-meds[1])
}
set.seed(1)
boot.object <- boot(bootCars, bootMedDiff, R = 5000,
strata = bootCars$Type)
require('boot')
bootCars <- Cars93['Price','Type']
head(bootCars)
bootMedDiff <- function(d,i){
# d is a dataframe with
#    quantitative variable in column 1
#    factor variable in column 2
meds <- tapply(d[i,1],d[,2],median)
c( meds[1]-meds[4], meds[5]-meds[4], meds[3]-meds[5], meds[3]-meds[1])
}
set.seed(1)
#boot.object <- boot(bootCars, bootMedDiff, R = 5000,
#                    strata = bootCars$Type)
# med_C - med_A
#boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=1)$bca[4:5]
# med_C - med_B
#boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=2)$bca[4:5]
# med_A - med_B (= 6)
#boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=3)$bca[4:5]
require('boot')
bootCars <- data.frame("Price" = Cars93$Price,
"Type" = Cars93$Type)
head(bootCars)
bootMedDiff <- function(d,i){
# d is a dataframe with
#    quantitative variable in column 1
#    factor variable in column 2
meds <- tapply(d[i,1],d[,2],median)
c( meds[1]-meds[4], meds[5]-meds[4], meds[3]-meds[5], meds[3]-meds[1])
}
set.seed(1)
#boot.object <- boot(bootCars, bootMedDiff, R = 5000,
#                    strata = bootCars$Type)
# med_C - med_A
#boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=1)$bca[4:5]
# med_C - med_B
#boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=2)$bca[4:5]
# med_A - med_B (= 6)
#boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=3)$bca[4:5]
require('boot')
bootCars <- data.frame("Price" = Cars93$Price,
"Type" = Cars93$Type)
#head(bootCars)
bootMedDiff <- function(d,i){
# d is a dataframe with
#    quantitative variable in column 1
#    factor variable in column 2
meds <- tapply(d[i,1],d[,2],median)
c( meds[1]-meds[4], meds[5]-meds[4], meds[3]-meds[5], meds[3]-meds[1])
}
set.seed(1)
boot.object <- boot(bootCars, bootMedDiff, R = 5000,
strata = bootCars$Type)
# med_C - med_A
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=1)$bca[4:5]
# med_C - med_B
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=2)$bca[4:5]
# med_A - med_B (= 6)
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=3)$bca[4:5]
require('boot')
bootCars <- data.frame("Price" = Cars93$Price,
"Type" = Cars93$Type)
#head(bootCars)
bootMedDiff <- function(d,i){
# d is a dataframe with
#    quantitative variable in column 1
#    factor variable in column 2
meds <- tapply(d[i,1],d[,2],median)
c( meds[1]-meds[4], meds[5]-meds[4], meds[3]-meds[5], meds[3]-meds[1])
}
set.seed(1)
boot.object <- boot(bootCars, bootMedDiff, R = 5000,
strata = bootCars$Type)
# Cm - Sm
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=1)$bca[4:5]
# Sp- Sm
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=2)$bca[4:5]
# Md - Sp
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=3)$bca[4:5]
# Md - Cm
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=4)$bca[4:5]
require('boot')
bootCars <- data.frame("Price" = Cars93$Price,
"Type" = Cars93$Type)
#head(bootCars)
bootMedDiff <- function(d,i){
# d is a dataframe with
#    quantitative variable in column 1
#    factor variable in column 2
meds <- tapply(d[i,1],d[,2],median)
c( meds[1]-meds[4], meds[5]-meds[4], meds[3]-meds[5], meds[3]-meds[1])
}
set.seed(1)
boot.object <- boot(bootCars, bootMedDiff, R = 5000,
strata = bootCars$Type)
Print("Cm - Sm")
require('boot')
bootCars <- data.frame("Price" = Cars93$Price,
"Type" = Cars93$Type)
#head(bootCars)
bootMedDiff <- function(d,i){
# d is a dataframe with
#    quantitative variable in column 1
#    factor variable in column 2
meds <- tapply(d[i,1],d[,2],median)
c( meds[1]-meds[4], meds[5]-meds[4], meds[3]-meds[5], meds[3]-meds[1])
}
set.seed(1)
boot.object <- boot(bootCars, bootMedDiff, R = 5000,
strata = bootCars$Type)
# Cm - Sm
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=1)$bca[4:5]
# Sp- Sm
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=2)$bca[4:5]
# Md - Sp
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=3)$bca[4:5]
# Md - Cm
boot.ci(boot.object,conf = 1 - .1/6, type='bca', index=4)$bca[4:5]
detach(Cars93)  # we don't need the Cars93 data now
data(airquality)
boxplot(Ozone~Month,data=airquality)
kruskal.test(Ozone ~ Month, data = airquality)
install.packages("dunn.test")
require("dunn.test")
dun
require("dunn.test")
dunn.test(Ozone~Month, data = airquality, method = 'holm', alpha = .05)
require("dunn.test")
attach(airquality)
dunn.test(Ozone,Month, method = 'holm', alpha = .05)
?dunn.test
