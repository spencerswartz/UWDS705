require(DS705data)
data('hotdogs')
View(hotdogs)
require(DS705data)
data('hotdogs')
boxplot(hotdogs$calories,hotdogs$type)
require(DS705data)
data('hotdogs')
boxplot(hotdogs$calories~hotdogs$type)
require(DS705data)
data(shields)
boxplot(Diameter~Machine,data=shields)
l.model <- lm( Diameter ~ Machine, data = shields)
test <- anova(l.model)
test
P <- test$P[1]
l.model <- lm( calories ~ type, data = hotdogs)
test <- anova(l.model)
test
TukeyHSD(aov(calories ~ type, data = hotdogs))$group
TukeyHSD(aov(calories ~ type, data = hotdogs))$group
TukeyHSD(aov(calories ~ type, data = hotdogs))
?TukeyHSD
TukeyHSD(aov(calories ~ type, data = hotdogs)conf.level = .1)
TukeyHSD(aov(calories ~ type, data = hotdogs),conf.level = .1)
TukeyHSD(aov(calories ~ type, data = hotdogs),conf.level = .9)
if (!require(MASS)){
install.packages('MASS')
library(MASS)
}
data(Cars93)
Cars93 <- Cars93[Cars93$Type != 'Van',]
Cars93$Type <- factor(Cars93$Type) # recasting Type forces the factor levels to reset
# shorten level labels to make them fit on boxplots
# Cm = Compact
# Lg = Large
# Md = Midsize
# Sm = Small
# Sp = Sporty
Cars93$Type <- factor(Cars93$Type,labels=c('Cm','Lg','Md','Sm','Sp'))
attach(Cars93)
summary(Price) # Price is one of the variables in the Cars93 data frame, after attaching we don't have to refer to the data frame.  Don't forget to detach(Cars93) after you're done.
# replace with your code
require(DS705data)
out <- onewayComp(RPM~Type,var.equal=TRUE,adjust='one.step')
out$comp[,c(3,4,6,7)] # select only columns 3 and 4 with the intervals, they are stored in the comp element of the list named out, I added column 6 to see the adjusted p-values for comparison to part 1d
# replace with your code
require(multcompView)
padj_extract <- function(formula,data){out$comp[,'p adj']}
multcompBoxplot(RPM~Type,data=Cars93,horizontal=T,compFn="padj_extract")
data("treadwear")
View(treadwear)
data("treadwear")
mean(treadwear$wear[treadwear$brand="A"])
data("treadwear")
mean(treadwear$wear[treadwear$brand=="A"])
mean(treadwear$wear[treadwear$brand=="B"])
mean(treadwear$wear[treadwear$brand=="C"])
mean(treadwear$wear[treadwear$brand=="D"])
sd(treadwear$wear[treadwear$brand=="A"])
sd(treadwear$wear[treadwear$brand=="B"])
sd(treadwear$wear[treadwear$brand=="C"])
sd(treadwear$wear[treadwear$brand=="D"])
boxplot(treadwearwear~treadwear$brand)
data("treadwear")
mean(treadwear$wear[treadwear$brand=="A"])
mean(treadwear$wear[treadwear$brand=="B"])
mean(treadwear$wear[treadwear$brand=="C"])
mean(treadwear$wear[treadwear$brand=="D"])
sd(treadwear$wear[treadwear$brand=="A"])
sd(treadwear$wear[treadwear$brand=="B"])
sd(treadwear$wear[treadwear$brand=="C"])
sd(treadwear$wear[treadwear$brand=="D"])
boxplot(treadwear$wear~treadwear$brand)
data("treadwear")
mean(treadwear$wear[treadwear$brand=="A"])
mean(treadwear$wear[treadwear$brand=="B"])
mean(treadwear$wear[treadwear$brand=="C"])
mean(treadwear$wear[treadwear$brand=="D"])
sd(treadwear$wear[treadwear$brand=="A"])
sd(treadwear$wear[treadwear$brand=="B"])
sd(treadwear$wear[treadwear$brand=="C"])
sd(treadwear$wear[treadwear$brand=="D"])
boxplot(treadwear$wear~treadwear$brand)
shapiro.test(treadwear$wear[treadwear$brand=="A"])
shapiro.test(treadwear$wear[treadwear$brand=="B"])
shapiro.test(treadwear$wear[treadwear$brand=="C"])
shapiro.test(treadwear$wear[treadwear$brand=="D"])
boxplot(Price~Type,horizontal=TRUE)
onewayComp(wear~brand,data = treadwear, var.equal = FALSE)
onewayComp(wear~brand,data = treadwear, var.equal = FALSE)$comp
onewayComp(wear~brand,data = treadwear, var.equal = FALSE, adjust = 'one.step')$comp
onewayComp(wear~brand,data = treadwear, var.equal = FALSE, adjust = 'one.step')
out <- onewayComp(Price~Type,var.equal=FALSE,adjust='holm',nboot=10000)
out$comp[,6:7]
out$comp[,'p adj'] <- out$comp[,'p adj']/2
padj_extract <- function(formula,data){out$comp[,'p adj']}
multcompBoxplot(Price~Type,data=Cars93,horizontal=T,compFn="padj_extract")
test <- oneway.test(Diameter ~ Machine, data = shields, var.equal=FALSE)
P <- test$p.value
test <- oneway.test(Diameter ~ Machine, data = shields, var.equal=FALSE)
P <- test$p.value
l.model <- lm( Diameter ~ Machine, data = shields)
test <- anova(l.model)
test
P <- test$P[1]
test <- oneway.test(Diameter ~ Machine, data = shields, var.equal=FALSE)
P <- test$p.value
test <- oneway.test(Diameter ~ Machine, data = shields, var.equal=FALSE)
P <- test$p.value
oneway.test(wear ~ brand, data = treadwear, var.equal=FALSE)
require(DS705data)
data(shields)
boxplot(Diameter~Machine,data=shields)
test <- oneway.test(Diameter ~ Machine, data = shields, var.equal=FALSE)
P <- test$p.value
test <- oneway.test(Diameter ~ Machine, data = shields, var.equal=FALSE)
P <- test$p.value
test
oneway.test(wear ~ brand, data = treadwear, var.equal=FALSE)
out <- onewayComp(wear~brand,data = treadwear,var.equal=FALSE,adjust='one.step',alpha=0.05)
onewayComp(wear~brand,data = treadwear,var.equal=FALSE,adjust='one.step',alpha=0.05)
# replace this with your code
out <- onewayComp(Price~Type,var.equal=FALSE,adjust='one.step',alpha=0.1)
out$comp[,c(2,3,6,7)]
# replace this with your code
out$comp[,'p adj'] <- out$comp[,'p adj']/2
padj_extract <- function(formula,data){out$comp[,'p adj']}
multcompBoxplot(Price~Type,data=Cars93,horizontal=T,compFn="padj_extract")
require(DS705data)
data(normtemp)
normtemp <- normtemp[1:128,]
temp <- normtemp$temp
hr <- normtemp$hr
plot(temp,hr,xlab="Temperature",ylab="Heart Rate",main="")
data("diamond")
diamond = diamond[-42,]
carat <- diamond$carat
price <- diamond$price
plot(carat,price,xlab="Carat",ylab="Price",main="")
linear.model <- lm(hr~temp,data=normtemp)
b0 <- linear.model$coef[1]
b1 <- linear.model$coef[2]
b0
b1
linear.model <- lm(carat~price,data=diamond)
b0 <- linear.model$coef[1]
b1 <- linear.model$coef[2]
b0
b1
linear.model <- lm(price~carat,data=diamond)
b0 <- linear.model$coef[1]
b1 <- linear.model$coef[2]
b0
b1
out <- cor.test(price,carat)
rPearson <- out$estimate
rPearson
out <- cor.test(price,carat)
out
cor.test(price,carat)
cor.test(price,carat, alpha=.01)
cor.test(price,carat, alpha=.01)$conf.int
resids <- linear.model$resid
diamond.fit <- linear.model$fitted.values
plot(diamond.fit,resids)
plot(carat,resids)
hist(resids)
qqnorm(resids)
qqline(resids)
shapiro.test(resids)
resids <- linear.model$resid
diamond.fit <- linear.model$fitted.values
plot(diamond.fit,resids)
plot(carat,resids)
hist(resids)
qqnorm(resids)
qqline(resids)
shapiro.test(resids)
resids <- linear.model$resid
diamond.fit <- linear.model$fitted.values
#plot(diamond.fit,resids)
#plot(carat,resids)
hist(resids)
qqnorm(resids)
qqline(resids)
shapiro.test(resids)
resids <- linear.model$resid
hist(resids)
qqnorm(resids)
qqline(resids)
boxplot(resids)
shapiro.test(resids)
resids <- linear.model$resid
diamond.fit <- linear.model$fitted.values
plot(diamond.fit,resids)
plot(carat,resids)
hist(resids)
qqnorm(resids)
qqline(resids)
boxplot(resids)
shapiro.test(resids)
diamond.fit <- linear.model$fitted.values
plot(diamond.fit,resids)
plot(carat,resids)
require(lmtest)
bptest(linear.model)
out <- summary(linear.model)
r.sq <- out$r.squared
r.sq.adj <- out$adj.r.squared
out <- summary(linear.model)
r.sq <- out$r.squared
r.sq.adj <- out$adj.r.squared
r.sq.adj
out <- summary(linear.model)
r.sq <- out$r.squared
r.sq.adj <- out$adj.r.squared
r.sq.adj
r.sq
x <- data.frame( carat = mean(carat) )
predict( linear.model, x, interval="confidence")
predict( linear.model, x, interval="prediction")
x <- data.frame( carat = mean(carat) )
predict( linear.model, x, interval="confidence")
predict( linear.model, x, interval="prediction")
plot(carat,price)
x <- data.frame( carat = mean(carat) )
predict( linear.model, x, interval="confidence")
predict( linear.model, x, interval="prediction")
plot(carat,price)
points(mean(carat),487.611, col='red')
posTest <- c(9,27)
negTest <- c(14,56)
cpTable <- rbind(posTest,negTest)
dimnames(cpTable) <- list( Test = c("pos","neg"),CP =c ("yes","no") )
out <- chisq.test(cpTable,correct=FALSE)
out
# it doesn't hurt to look at the expected cell counts to make sure they are all at least 5
min(out$expected)
posTest <- c(9,27)
negTest <- c(14,56)
cpTable <- rbind(posTest,negTest)
dimnames(cpTable) <- list( Test = c("pos","neg"),CP =c ("yes","no") )
cpTable
out <- chisq.test(cpTable,correct=FALSE)
out
# it doesn't hurt to look at the expected cell counts to make sure they are all at least 5
min(out$expected)
Rhpos <- c(226,198)
Rhneg <- c(46,30)
BloodTable <- rbind(Rhpos,Rhneg)
dimnames(BlodTable) <- list( Rh = c("pos","neg"),Type =c ("A,B,AB","O") )
Rhpos <- c(226,198)
Rhneg <- c(46,30)
BloodTable <- rbind(Rhpos,Rhneg)
dimnames(BloodTable) <- list( Rh = c("pos","neg"),Type =c ("A,B,AB","O") )
BloodTable
out <- chisq.test(BloodTable,correct=FALSE)
out
# it doesn't hurt to look at the expected cell counts to make sure they are all at least 5
min(out$expected)
Rhpos <- c(226,198)
Rhneg <- c(46,30)
BloodTable <- rbind(Rhpos,Rhneg)
dimnames(BloodTable) <- list( Rh = c("pos","neg"),Type =c ("A,B,AB","O") )
BloodTable
out <- chisq.test(BloodTable,correct=FALSE)
out
oddsR <-(198/226)/(30/46)
oddsR <-(198/226)/(30/46)
oddsR
oddsR <-(198/226)/(30/46)
oddsR
100*(abs(1-round(oddsR,2)))
Rhpos <- c(226,198)
Rhneg <- c(46,30)
BloodTable <- rbind(Rhpos,Rhneg)
dimnames(BloodTable) <- list( Rh = c("pos","neg"),Type =c ("A,B,AB","O") )
BloodTable
out <- chisq.test(BloodTable,correct=FALSE)
out
out <- prop.test(30,228,correct=FALSE)
out <- prop.test(30,228,correct=FALSE)
out
out <- prop.test(30,228,correct=FALSE, conf.level = .9)
out
data("shells")
lm.full = lm(y~., data=shells) # regress y on everything in data set
View(shells)
data("shells")
lm.full = lm(Y~., data=shells) # regress y on everything in data set
step(lm.full,direction="both")
fit <- lm(formula = Y ~ X1 + X2 + X4 + X6 + X7, data = shells)
summary(fit)
require(car)
vif(fit)
fit2 <- lm(formula = Y ~ X1 + X2 + (X2*X2) + X4 + X6, data = shells)
summary(fit2)
AIC(fit2)
xSqr <- shells$X2*shells$X2
fit2 <- lm(formula = Y ~ X1 + X2 + xSqr + X4 + X6, data = shells)
summary(fit2)
AIC(fit2)
xSqr <- shells$X2*shells$X2
fit2 <- lm(formula = Y ~ X1 + X2 + xSqr + X4 + X6, data = shells)
summary(fit2)
AIC(fit2)
AIC(fit)
xSqr <- shells$X2*shells$X2
fit2 <- lm(formula = Y ~ X1 + X2 + xSqr + X4 + X6, data = shells)
summary(fit2)
AIC(fit2)
vif(fit)
vif(fit2)
cx2=shells$x2-mean(shells$x2)
cx2sq=cx2^2
fit3 <- lm(formula = Y ~ X1 + cx2 + cx2sq + X4 + X6, data = shells)
cx2=shells$x2-mean(shells$x2)
cx2sq=cx2^2
fit3 <- lm(formula = Y ~ X1 + cx2 + cx2sq + X4 + X6, data = shells)
cx2 <- shells$x2-mean(shells$x2)
cx2sq <- cx2^2
fit3 <- lm(formula = Y ~ X1 + cx2 + cx2sq + X4 + X6, data = shells)
cx2 <- shells$X2-mean(shells$X2)
cx2sq <- cX2^2
cx2 <- shells$X2-mean(shells$X2)
cx2sq <- cx2^2
fit3 <- lm(formula = Y ~ X1 + cx2 + cx2sq + X4 + X6, data = shells)
summary(fit3)
vif(fit3)
summary(fit)$adjr2
summary(fit3)$adjr2
summary(fit)
summary(fit3)
dwtest(fit3)
fit6 <- lm(y~x1+x3,data=JobProf)
load("~/Google Drive/DS 705 /Class Materials/Weekly Content/week 10/JobProf.rda")
data("JobProf")
fit6 <- lm(y~x1+x3,data=JobProf)
summary(fit6)
dwtest(fit6)
newcx2 <- 2.4-mean(shells$X2)
newcx2sq <- newcx2*newcx2
newdata <- data.frame(X1=3.6,cx2=newcx2,cx2sq=newcx2sq,X4=3.0,X6=48)
predict.lm(fit3,newdata,interval="prediction")
dis95 = c(0.45, 0.18, 0.16, 0.21)
Counts15 = c(38, 20, 15, 42)
out <- chisq.test(x=Counts15,p=dis95)
out
dProps = c(0.15, 0.09, 0.29, 0.21, 0.12, 0.14)
dCounts = c(14, 15, 22, 30, 19, 25)
out <- chisq.test(x=dCounts,p=dProps)
out
dis95 = c(0.45, 0.18, 0.16, 0.21)
Counts15 = c(38, 20, 15, 42)
out <- chisq.test(x=Counts15,p=dis95)
out
dis95 = c(0.45, 0.18, 0.16, 0.21)
Counts15 = c(38, 20, 15, 42)
out <- chisq.test(x=Counts15,p=dis95, alpha=.1)
dis95 = c(0.45, 0.18, 0.16, 0.21)
Counts15 = c(38, 20, 15, 42)
out <- chisq.test(x=Counts15,p=dis95)
out
data("cheese")
View(cheese)
data("anesthesia")
View(anesthesia)
View(anesthesia)
counts <- table(anesthesia$anesthetic,anesthesia$nausea)
counts
chisq.test(anesthesia$anesthetic,anesthesia$nausea)
data("cheese")
taste.out <- glm(taste~acetic+person,data=cheese,family="binomial")
summary(taste.out)
exp(2.787)
exp(-1.5261)
View(cheese)
View(cheese)
newdata2 <- data.frame(acetic=6,person(Child))
newdata2 <- data.frame(acetic=6,person=Child)
newdata2 <- data.frame(acetic=6,person='Child')
predict(taste.out, newdata2, type="response")
naus.out2 <- glm(nausea~painmed,data=anesthesia,family="binomial")
summary(naus.out2)
newdata2 <- data.frame(painmed=c(50,100))
predict(naus.out2, newdata2, type="response")
out <- predict(taste.out, newdata2, se.fit=TRUE)
out <- predict(taste.out, newdata2, se.fit=TRUE)
newdata2 <- data.frame(acetic=6,person='Child')
predict(taste.out, newdata2, type="response")
out <- predict(taste.out, newdata2, se.fit=TRUE)
C = .95  # define the level of confidence
crit = qnorm(1-(1-C)/2)  # get the appropriate critical value
lower = exp(out$fit-crit*out$se.fit)/(1+exp(out$fit-crit*out$se.fit))
upper = exp(out$fit+crit*out$se.fit)/(1+exp(out$fit+crit*out$se.fit))
c(lower,upper)
newdata2 <- data.frame(acetic=6,person='Child')
predict(taste.out, newdata2, type="response")
out <- predict(taste.out, newdata2, se.fit=TRUE)
C = .95  # define the level of confidence
crit = qnorm(1-(1-C)/2)  # get the appropriate critical value
lower = exp(out$fit-crit*out$se.fit)/(1+exp(out$fit-crit*out$se.fit))
upper = exp(out$fit+crit*out$se.fit)/(1+exp(out$fit+crit*out$se.fit))
c(lower,upper)
